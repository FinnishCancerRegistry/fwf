% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/io_tools.R, R/package_fwf.R
\docType{package}
\name{fwf}
\alias{fwf}
\alias{fwf_write}
\alias{fwf_read}
\title{Fixed Width Format}
\usage{
fwf_write(x, path, widths = NULL, fwrite_arg_list = NULL)

fwf_read(path, fread_arg_list = NULL)
}
\arguments{
\item{x}{\verb{[data.frame]} (no default)

\code{data.frame} to write to disk.}

\item{path}{\verb{[character]} (no default)
\itemize{
\item \code{fwf_write}: Path to write to.
\item \code{fwf_read}: Path to read from.
}}

\item{widths}{\verb{[NULL, integer]} (default \code{NULL})
\itemize{
\item \code{NULL}: the width of each field will be \code{max(nchar(x[[i]]))} for all
\verb{i in 1:ncol(x)}
\item \code{integer}: use these widths; must be of length \code{ncol(x)}
}}

\item{fwrite_arg_list}{\verb{[NULL]} (default \code{NULL})
\itemize{
\item \code{NULL}: No additional arguments passed to \link[data.table:fwrite]{data.table::fwrite}.
\item \code{list}: Pass these additional arguments passed to \link[data.table:fwrite]{data.table::fwrite}.
}

\link[data.table:fwrite]{data.table::fwrite} args \code{x} and \code{file} always set to args \code{x} and \code{path}
of this function.}

\item{fread_arg_list}{\verb{[NULL, list]} (default \code{NULL})
\itemize{
\item \code{NULL}: No additional arguments passed to \link[data.table:fread]{data.table::fread}.
\item \code{list}: Pass these additional arguments passed to \link[data.table:fread]{data.table::fread}.
}

\link[data.table:fread]{data.table::fread} arg \code{file} is always set to arg \code{path} of this function.}
}
\value{
\itemize{
\item \code{fwf::fwf_write}: Always returns \code{NULL} invisibly.
}

\itemize{
\item \code{fwf::fwf_read}: Returns a \code{data.table}, the table read from \code{path}.
}
}
\description{
Read and write fixed-width format files.

\code{fwf} is a tiny package to read and write fixed width format tables.
}
\section{Example}{
\if{html}{\out{<div class="sourceCode r">}}\preformatted{# Remember, data types other than character, integer, and double may not
# be properly handled (because meta-information about datatype is lost when
# writing into a text file). See ?data.table::fread for more control.
# over reading behaviour.
exp <- data.frame(
col1 = c("abcdefghijklmn", "abc"),
col2 = c(1e6L, 1L),
col3 = as.Date(c("2000-01-01", "2001-01-01"))
)
tf <- tempfile(pattern = "fwf_file_", fileext = ".txt")
fwf::fwf_write(exp, tf)
obs <- fwf::fwf_read(
path = tf,
fread_arg_list = list(colClasses = c(col3 = "Date"))
)
stopifnot(
all.equal(exp, obs, check.attributes = FALSE),
identical(lapply(exp, class), lapply(obs, class))
)
}\if{html}{\out{</div>}}
}

\section{Installation}{
\if{html}{\out{<div class="sourceCode r">}}\preformatted{devtools::install_github("FinnishCancerRegistry/fwf")
}\if{html}{\out{</div>}}
}

\section{News}{

\subsection{News for version 1.0.1}{
\subsection{Object fwf news:}{

Improve docpage ?fwf::fwf.
}

}

\subsection{News for version 1.0.0}{
\subsection{Object fwf news:}{

Bump to version 1.0.0.
}

}

\subsection{News for version 0.2.0}{
\subsection{Object fwf::fwf_write news:}{

Improved \code{fwf_write} internal preprocessing steps.
}

}

\subsection{News for version 0.1.0}{
\subsection{Object fwf::fwf_read news:}{

Fun \code{fwf_read} included in first version of this package.
}

\subsection{Object fwf::fwf_write news:}{

Fun \code{fwf_write} included in first version of this package.
}

}
}

\examples{
# Remember, data types other than character, integer, and double may not
# be properly handled (because meta-information about datatype is lost when
# writing into a text file). See ?data.table::fread for more control.
# over reading behaviour.
exp <- data.frame(
col1 = c("abcdefghijklmn", "abc"),
col2 = c(1e6L, 1L),
col3 = as.Date(c("2000-01-01", "2001-01-01"))
)
tf <- tempfile(pattern = "fwf_file_", fileext = ".txt")
fwf::fwf_write(exp, tf)
obs <- fwf::fwf_read(
path = tf,
fread_arg_list = list(colClasses = c(col3 = "Date"))
)
stopifnot(
all.equal(exp, obs, check.attributes = FALSE),
identical(lapply(exp, class), lapply(obs, class))
)

}
